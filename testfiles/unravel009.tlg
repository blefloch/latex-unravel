This is a generated file for the l3build validation system.
Don't change this file in any respect.
============================================================
TEST 1: if/ifcat and catcode 6 and 13 (github issue 32b)
============================================================
Defining \g__unravel_input_1_gtl on line ...
[===== Start =====]
|| 
|> \if ####\fi 
s10
[==========] \if = \if
[==========] ##
[==========] ##
[==========] \if ####=true
[==========] \fi = \fi
[===== Start =====]
|| 
|> \if !##\fi 
s10
[==========] \if = \if
[==========] !
[==========] ##
[==========] \if !##=true
[==========] \fi = \fi
[===== Start =====]
|| 
|> \if \noexpand *\noexpand !\fi 
s10
[==========] \if = \if
Defining \g__unravel_input_2_gtl on line ...
Defining \g__unravel_input_3_gtl on line ...
[==========] *
[==========] !
[==========] \if *!=false => skip to \fi 
[===== Start =====]
|| 
|> \if \noexpand *!\fi 
s10
[==========] \if = \if
[==========] *
[==========] !
[==========] \if *!=false => skip to \fi 
[===== Start =====]
|| 
|> \if \noexpand *\noexpand +\fi 
s10
[==========] \if = \if
[==========] *
[==========] +
[==========] \if *+=false => skip to \fi 
[===== Start =====]
|| 
|> \if \noexpand +\mag \fi 
s10
[==========] \if = \if
[==========] +
[==========] \mag 
[==========] \if +\mag =true
[==========] \fi = \fi
[===== Start =====]
|| 
|> \if \noexpand +\relax \fi 
s10
[==========] \if = \if
[==========] +
[==========] \relax 
[==========] \if +\relax =true
[==========] \fi = \fi
[===== Start =====]
|| 
|> \ifcat ####\fi 
s10
[==========] \ifcat = \ifcat
[==========] ##
[==========] ##
[==========] \ifcat ####=true
[==========] \fi = \fi
[===== Start =====]
|| 
|> \ifcat !##\fi 
s10
[==========] \ifcat = \ifcat
[==========] !
[==========] ##
[==========] \ifcat !##=true
[==========] \fi = \fi
[===== Start =====]
|| 
|> \ifcat \noexpand *\noexpand !\fi 
s10
[==========] \ifcat = \ifcat
[==========] *
[==========] !
[==========] \ifcat *!=false => skip to \fi 
[===== Start =====]
|| 
|> \ifcat \noexpand *!\fi 
s10
[==========] \ifcat = \ifcat
[==========] *
[==========] !
[==========] \ifcat *!=false => skip to \fi 
[===== Start =====]
|| 
|> \ifcat \noexpand *\noexpand +\fi 
s10
[==========] \ifcat = \ifcat
[==========] *
[==========] +
[==========] \ifcat *+=false => skip to \fi 
[===== Start =====]
|| 
|> \ifcat \noexpand +\mag \fi 
s10
[==========] \ifcat = \ifcat
[==========] +
[==========] \mag 
[==========] \ifcat +\mag =true
[==========] \fi = \fi
[===== Start =====]
|| 
|> \ifcat \noexpand +\relax \fi 
s10
[==========] \ifcat = \ifcat
[==========] +
[==========] \relax 
[==========] \ifcat +\relax =true
[==========] \fi = \fi
============================================================
============================================================
TEST 2: Display of unexpanded/detokenize/the in edef (github issue 33)
============================================================
[===== Start =====]
|| 
|> \edef \x {\unexpanded {\hi }}
[==========] \unexpanded = \unexpanded
|| \edef \x {
|| \unexpanded 
|> {\hi }}
[==========] \unexpanded {\hi }
|| \edef \x {\hi 
|> }
[==========] \edef \x {\hi }
|| \edef \x {\hi }
|> 
[==========] Set \x=macro:->\hi 
|| 
|> 
[===== End =====]
TRUE
[===== Start =====]
|| 
|> \edef \x {\detokenize {\hi }}
[==========] \detokenize = \detokenize
|| \edef \x {
|| \detokenize 
|> {\hi }}
[==========] \detokenize {\hi }
|| \edef \x {\hi 
|> }
[==========] \edef \x {\hi }
|| \edef \x {\hi }
|> 
[==========] Set \x=macro:->\hi 
|| 
|> 
[===== End =====]
TRUE
[===== Start =====]
|| 
|> \edef \x {\the \toks 0}
[==========] \the = \the
|| \edef \x {
|| \the 
|> \toks 0}
[==========] \toks = \toks
|| \edef \x {
|| \the 
|| \toks 
|> 0}
[==========] 0
|| \edef \x {
|| \the 
|| \toks 0
|> }
[==========] \the =>\hi 
|| \edef \x {\hi 
|> }
[==========] \edef \x {\hi }
|| \edef \x {\hi }
|> 
[==========] Set \x=macro:->\hi 
|| 
|> 
[===== End =====]
TRUE
============================================================
============================================================
TEST 3: Stop correctly for "until token" instruction (github issue 34)
============================================================
[===== Start =====]
|| 
|> \testA: 
u\testD: 
[==========] \testA: = \long macro:->\testB: 
[==========] \testB: = \long macro:->\testC: 
Defining \g__unravel_input_4_gtl on line ...
[==========] \testC: = \long macro:->\testD: 
|| 
|> \testD: 
x
[===== Start =====]
|| 
|> \testA: 
u\testA: 
[==========] \testA: = \long macro:->\testB: 
[==========] \testB: = \long macro:->\testC: 
[==========] \testC: = \long macro:->\testD: 
! Undefined control sequence.
\l__unravel_head_tl ->\testD: 
l. ...  }
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
[==========] \testD: = undefined
============================================================
============================================================
TEST 4: skip to else/fi (github issue 35)
============================================================
[===== Start =====]
|| 
|> \ifx aaT\else F\fi \ifx aaT\fi \ifx abT\else F\fi \ifx abT\fi 
[==========] \ifx = \ifx
|| \ifx 
|> aaT\else F\fi \ifx aaT\fi \ifx abT\else F\fi \ifx abT\fi 
[==========] Compare: \ifx aa=true
|| 
|> T\else F\fi \ifx aaT\fi \ifx abT\else F\fi \ifx abT\fi 
[==========] T
<| T
|| 
|> \else F\fi \ifx aaT\fi \ifx abT\else F\fi \ifx abT\fi 
[==========] \else = \else => skip to \fi 
<| T
|| 
|> \ifx aaT\fi \ifx abT\else F\fi \ifx abT\fi 
[==========] \ifx = \ifx
<| T
|| \ifx 
|> aaT\fi \ifx abT\else F\fi \ifx abT\fi 
[==========] Compare: \ifx aa=true
<| T
|| 
|> T\fi \ifx abT\else F\fi \ifx abT\fi 
[==========] T
<| TT
|| 
|> \fi \ifx abT\else F\fi \ifx abT\fi 
[==========] \fi = \fi
<| TT
|| 
|> \ifx abT\else F\fi \ifx abT\fi 
[==========] \ifx = \ifx
<| TT
|| \ifx 
|> abT\else F\fi \ifx abT\fi 
[==========] Compare: \ifx ab=false => skip to \else 
<| TT
|| 
|> F\fi \ifx abT\fi 
[==========] F
<| TTF
|| 
|> \fi \ifx abT\fi 
[==========] \fi = \fi
<| TTF
|| 
|> \ifx abT\fi 
[==========] \ifx = \ifx
<| TTF
|| \ifx 
|> abT\fi 
[==========] Compare: \ifx ab=false => skip to \fi 
<| TTF
|| 
|> 
[===== End =====]
TRUE
============================================================
============================================================
TEST 5: expanded support (github issue 36)
============================================================
[===== Start =====]
|| 
|> \exp_after:wN \show \expanded {\exp_after:wN \if_meaning:w \expanded
|> {\use_i:nn A\c_empty_tl }At\else: f\fi: }
[==========] \exp_after:wN \show 
|| \exp_after:wN \show 
|> \expanded {\exp_after:wN \if_meaning:w \expanded {\use_i:nn A\c_empty_tl
|> }At\else: f\fi: }
[==========] \expanded = \expanded
|| \exp_after:wN \show 
|| \expanded 
|> {\exp_after:wN \if_meaning:w \expanded {\use_i:nn A\c_empty_tl }At\else:
|> f\fi: }
[==========] \exp_after:wN \if_meaning:w 
|| \exp_after:wN \show 
|| \expanded 
|| {
|| \exp_after:wN \if_meaning:w 
|> \expanded {\use_i:nn A\c_empty_tl }At\else: f\fi: }
[==========] \expanded = \expanded
|| \exp_after:wN \show 
|| \expanded 
|| {
|| \exp_after:wN \if_meaning:w 
|| \expanded 
|> {\use_i:nn A\c_empty_tl }At\else: f\fi: }
[==========] \use_i:nn = \long macro:#1#2->#1
|| \exp_after:wN \show 
|| \expanded 
|| {
|| \exp_after:wN \if_meaning:w 
|| \expanded 
|| {
|> A}At\else: f\fi: }
[==========] \expanded {\exp_not:n {A}}=A
|| \exp_after:wN \show 
|| \expanded 
|| {
|| \exp_after:wN \if_meaning:w 
|> AAt\else: f\fi: }
[==========] back_input: \exp_after:wN \if_meaning:w 
|| \exp_after:wN \show 
|| \expanded 
|| {
|> \if_meaning:w AAt\else: f\fi: }
[==========] \if_meaning:w = \ifx
|| \exp_after:wN \show 
|| \expanded 
|| {
|| \if_meaning:w 
|> AAt\else: f\fi: }
[==========] Compare: \if_meaning:w AA=true
|| \exp_after:wN \show 
|| \expanded 
|| {
|> t\else: f\fi: }
[==========] \else: = \else => skip to \fi: 
|| \exp_after:wN \show 
|| \expanded 
|| {t
|> }
[==========] \expanded {\exp_not:n {t}}=t
|| \exp_after:wN \show 
|> t
[==========] back_input: \exp_after:wN \show 
|| 
|> \show t
[==========] \show = \show
|| \show 
|> t
> the letter t.
<argument> t
l. ...  }
[===== End =====]
============================================================
============================================================
TEST 6: Runaway unravel (github issue 37)
============================================================
[===== Start =====]
|| 
|> \romannumeral \numexpr -1
[==========] \romannumeral = \romannumeral
|| \romannumeral 
|> \numexpr -1
[==========] \numexpr = \numexpr
|| \romannumeral 
|| \numexpr 
|> -1
[==========] -
|| \romannumeral 
|| \numexpr -
|> 1
[==========] 1
|| \romannumeral 
|| \numexpr -1
|> 
! Package unravel Error: Runaway \unravel, so \relax inserted.
For immediate help type H <return>.
 ...                                              
l. ...  }
Some TeX command expects input beyond the end of the argument of \unravel.
[==========] \numexpr -1 => -1
|| \romannumeral -1
|> 
[==========] \romannumeral -1=
|| 
|> 
[===== End =====]
[===== Start =====]
|| 
|> \romannumeral -`a
[==========] \romannumeral = \romannumeral
|| \romannumeral 
|> -`a
[==========] -
|| \romannumeral -
|> `a
[==========] `a=97
|| \romannumeral -97
|> 
! Package unravel Error: Runaway \unravel, so \relax inserted.
For immediate help type H <return>.
 ...                                              
l. ...  }
Some TeX command expects input beyond the end of the argument of \unravel.
[==========] \romannumeral -97=
|| 
|> \relax 
[==========] \relax = \relax
|| 
|> 
[===== End =====]
[===== Start =====]
|| 
|> \iffalse 
[==========] \iffalse = \iffalse
|| \iffalse 
|> 
! Package unravel Error: Runaway \if... Exiting \unravel
Type <return> to continue.
 ...                                              
l. ...  }
LaTeX does not know anything more about this error, sorry.
Try typing <return> to proceed.
If that doesn't work, type X <return> to quit.
============================================================
============================================================
TEST 7: Unit optional space (github issue 38)
============================================================
|macro:->\char 92 BOOM|
Defining \g__unravel_input_5_gtl on line ...
Defining \g__unravel_input_6_gtl on line ...
TRUE
TRUE
TRUE
Defining \g__unravel_input_7_gtl on line ...
Defining \g__unravel_input_8_gtl on line ...
Defining \g__unravel_input_9_gtl on line ...
Defining \g__unravel_input_10_gtl on line ...
Defining \g__unravel_input_11_gtl on line ...
Defining \g__unravel_input_12_gtl on line ...
Defining \g__unravel_input_13_gtl on line ...
Defining \g__unravel_input_14_gtl on line ...
! Package unravel Error: TeX sees "p" and throws an error:
(unravel)                
(unravel)                    Illegal unit of measure (pt inserted)
For immediate help type H <return>.
 ...                                              
l. ...  }
TeX's advice is:
    Dimensions can be in units of em, ex, in, pt, pc, cm, mm, dd, cc, nd, nc,
    bp, or sp; but yours is a new one! I'll assume that you meant to say pt,
    for printer's points. To recover gracefully from this error, it's best to
    delete the erroneous units; e.g., type `2' to delete two letters. (See
    Chapter 27 of The TeXbook.)
Defining \g__unravel_input_15_gtl on line ...
TRUE
TRUE
> \relax=\relax.
<argument> \relax 
l. ...  }
TRUE
============================================================
============================================================
TEST 8: Implicit number as dimension/glue unit (github issue 39)
============================================================
TRUE
> \parskip=15.25879pt plus 0.04759pt.
<recently read> }
l. ...  }
============================================================
============================================================
TEST 9: prompt-input option
============================================================
[===== Start =====]
|| 
|> \testA: 
Your input=
[==========] \testA: = \long macro:->\testB: 
|| 
|> \testB: 
Your input=
[==========] \testB: = \long macro:->\testC: 
|| 
|> \testC: 
Your input=x
[===== Start =====]
|| 
|> \testA: 
Your input=s2
[==========] \testA: = \long macro:->\testB: 
[==========] \testB: = \long macro:->\testC: 
Your input=x
[===== Start =====]
|| 
|> \testA: 
s2
[==========] \testA: = \long macro:->\testB: 
[==========] \testB: = \long macro:->\testC: 
x
============================================================
