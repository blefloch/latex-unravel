%
% Copyright (C) 2018 Bruno Le Floch
%
\documentclass{minimal}
\input{regression-test}
\RequirePackage[enable-debug]{expl3}
\RequirePackage{unravel}
\ExplSyntaxOn
\debug_on:n { check-declarations , check-expressions , deprecation , log-functions }
\ExplSyntaxOff

\begin{document}

\START
\ExplSyntaxOn

\unravelsetup { machine }

\TEST { \unravel ~ and ~ noexpand }
  {
    \unravel { \space \noexpand \space }
    \unravel { \undefined \noexpand \undefined }
    \unravel { \noexpand \hfil }
    \unravel { \edef \foo { a \noexpand \space b } }
    \unravel { \edef \foo { \expandafter a \noexpand \space b } }
    \unravel { \edef \foo { \csname space \noexpand \endcsname } }
    \unravel { \edef \foo { \csname space \noexpand \empty \endcsname } }
    \unravel { \edef \foo { \romannumeral 1 \noexpand 2 \noexpand \noexpand \empty } }
    \unravel { \edef \foo { \expandafter \ifx \noexpand \empty \empty a \fi } }
    \unravel { \expandafter \show \noexpand \empty }
    \unravel { \expandafter \def \noexpand \foo { } \foo }
    \unravel { \expandafter \ifdefined \noexpand \foobar \else \fi }
  }

\TEST { \unravel ~ and ~ the ~ in ~ edef }
  {
    \unravel { \toks 0 { 2 } \toks 2 { \abc } }
    \unravel { \edef \foo { a \the \toks 0 \the \toks 0 b } }
  }

\TEST { \unravel ~ and ~ token_if_expandable }
  {
    \unravel { \token_if_expandable:NTF \if_meaning:w { } { } }
    \unravel { \token_if_expandable:NTF \def { } { } }
    \unravel { \exp_after:wN \if_meaning:w \exp_not:N \undefined \undefined \fi: }
  }


\TEST { \unravel ~ and ~ noexpand ~ again }
  {
    \unravel [mute]
      { \tl_set:Nx \l_tmpa_tl { \char_generate:nn {65} {11} } }
    \tl_if_eq:onTF \l_tmpa_tl { A } { \TRUE } { \ERROR }
  }

\END
